@page "/{FhirResourceType}"
@inject FHIRProxy.FHIRClient FhirClient
@inject FhirJsonParser Parser
@inject HtmlSanitizer HtmlSanitizer
@inject IMemoryCache Cache
@inject ILogger<FhirResource> Logger
@inject UrlService UrlService
@attribute [Authorize]

<div class="row">
    <div class="col-md-6">
        <h3>@FhirResourceType</h3>

        <p>
            @ConvertStringToMarkupString(ResourceComponent?.Documentation?.Value)
        </p>

        @{
            if (CanCreate)
            {
                <a href="@UrlService.Url($"/{FhirResourceType}/Create")" class="btn btn-primary">Create</a>
            }
        }

        <div style="position: absolute; bottom: 0;">
            @if (Previous != null && Previous.Any())
            {
                <button @onclick="async () => await Refresh(Previous.Last.Value)" class="btn btn-secondary m-3">Previous</button>
            }
            else
            {
                <button class="btn btn-secondary m-3" disabled>Previous</button>
            }
            @if (Next != null)
            {
                <button @onclick="async () => await Refresh(Next)" class="btn btn-secondary m-3">Next</button>
            }
            else
            {
                <button class="btn btn-secondary m-3" disabled>Next</button>
            }
        </div>
    </div>

    @if (Bundle?.Type == Bundle.BundleType.Searchset)
    {
        <div class="col-md-6">
            <div class="form-group">
                <label for="inputsearchParameter">Parameter</label>
                <select @bind="SearchParam" class="form-control">
                    @foreach (var param in ResourceComponent.SearchParam)
                    {
                        <option value="@param.Name">@param.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="inputsearch">Search</label>
                <input id="inputSearch" autocomplete="new-password" @bind="SearchText" @bind:event="oninput" type="text" class="form-control" placeholder="Search">
            </div>
            <div class="form-group">
                <button class="btn btn-outline-primary" @onclick="SearchTextFunction">Search</button>
            </div>
        </div>
    }
</div>

@if (Bundle?.Type == Bundle.BundleType.Searchset)
{
    <div class="row">
        <table class="table table-striped table-hover table-responsive-md">
            <thead>
                <tr>
                    <th>Json</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in Bundle.Entry)
                {
                    <tr>
                        <td>
                            <pre class="text">
                                @entry.Resource.ToJson(FhirJsonSettings)
                            </pre>
                        </td>
                        <td>
                            <a href="@UrlService.Url($"/{FhirResourceType}/{entry.Resource.Id}")" class="btn btn-secondary">Details</a>
                            <a href="@UrlService.Url($"/{FhirResourceType}/{entry.Resource.Id}/Update")" class="btn btn-outline-warning">Update</a>
                        </td>
                    </tr>
                }

            </tbody>
        </table>

        @if (Previous != null && Previous.Any())
        {
            <button @onclick="async () => await Refresh(Previous.Last.Value)" class="btn btn-secondary m-3">Previous</button>
        }
        @if (Next != null)
        {
            <button @onclick="async () => await Refresh(Next)" class="btn btn-secondary m-3">Next</button>
        }
    </div>
}
else
{
    <pre class="text">
        @json
    </pre>
}

@code {
    [Parameter]
    public string? FhirResourceType { get; set; }

    public string? json { get; set; }

    public LinkedList<string>? Previous { get; set; }

    public string? Next { get; set; }

    public bool CanCreate { get; set; }

    public Bundle? Bundle { get; set; }

    public CapabilityStatement.ResourceComponent? ResourceComponent { get; set; }

    private FhirJsonSerializationSettings FhirJsonSettings = new FhirJsonSerializationSettings
    {
        Pretty = true,
        IgnoreUnknownElements = true
    };

    protected override async System.Threading.Tasks.Task OnParametersSetAsync()
    {
        var capabilities = Cache.Get<CapabilityStatement>(nameof(CapabilityStatement));

        ResourceComponent = capabilities.Rest.Single().Resource.First(r => r.Type.ToString() == FhirResourceType);

        CanCreate = ResourceComponent.Interaction.Any(i => i.Code.Value == CapabilityStatement.TypeRestfulInteraction.Create);

        await SearchTextFunction();
    }

    private async System.Threading.Tasks.Task Refresh(string urlString)
    {
        if (urlString == Next)
        {
            Previous.AddLast(Bundle.Link.First(l => l.Relation == "self").Url);
        }
        else
        {
            Previous.RemoveLast();
        }

        var url = new Uri(urlString);

        var response = await FhirClient.LoadResource(url.PathAndQuery);

        TryProcessResponse(response);

        StateHasChanged();
    }

    private void TryProcessResponse(FHIRProxy.FHIRResponse response)
    {
        try
        {
            json = response.Content.ToString();

            Bundle = Parser.Parse<Bundle>(response.Content.ToString());

            Next = Bundle.Link?.FirstOrDefault(l => l.Relation == "next")?.Url;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
        }
    }

    private string _searchText;
    public string SearchText
    {
        get
        {
            return _searchText;
        }
        set
        {
            _searchText = value;
        }
    }

    public string? SearchParam { get; set; }

    public async System.Threading.Tasks.Task SearchTextFunction()
    {
        Previous = new LinkedList<string>();

        var query = "?";

        if (string.IsNullOrWhiteSpace(SearchText) == false)
        {
            query += $"{SearchParam}={SearchText}";
        }

        FHIRProxy.FHIRResponse response = await FhirClient.LoadResource(FhirResourceType, query);

        TryProcessResponse(response);
    }

    private MarkupString ConvertStringToMarkupString(string? value)
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            // Convert markdown string to HTML
            var html = Markdig.Markdown.ToHtml(value, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());

            // Sanitize HTML before rendering
            var sanitizedHtml = HtmlSanitizer.Sanitize(html);

            // Return sanitized HTML as a MarkupString that Blazor can render
            return new MarkupString(sanitizedHtml);
        }

        return new MarkupString();
    }
}
