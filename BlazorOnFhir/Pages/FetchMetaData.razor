@page "/metadata"

@inject IMemoryCache Cache;

<h1>Fhir operations</h1>

<div class="col-4 mt-2">
    <div class="form-group">
        <label for="inputsearch">Search</label>
        <input id="inputSearch" autocomplete="new-password" @bind="SearchText" @bind:event="oninput" type="text" class="form-control" placeholder="Search">
    </div>
</div>

@if (Components == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Type</th>
                <th>Interaction</th>
                <th>Profile</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var operation in Components)
            {
                var resource = operation.Type;

                <tr>
                    <td><a href="/@operation.Type">@operation.Type</a></td>
                    <td>@RenderInteractions(operation.Interaction)</td>
                    <td><a href="@operation.Profile">@operation.Profile</a></td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowOperationDetails(resource)">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<CapabilityStatement.ResourceComponent> Components;

    protected override void OnInitialized()
    {
        Components = Cache.Get<CapabilityStatement>(nameof(CapabilityStatement)).Rest[0].Resource;
    }

    private void ShowOperationDetails(ResourceType? type)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(OperationDetails.Component), Components.First(c => c.Type == type));

        Modal.Show<OperationDetails>($"{type} - Operations details", parameters);
    }

    private string RenderInteractions(List<CapabilityStatement.ResourceInteractionComponent> components)
    {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < components.Count; i++)
        {
            sb.Append(components[i].Code.Value);

            if (i < components.Count - 1)
            {
                sb.Append(" | ");
            }
        }

        return sb.ToString();
    }

    private string _searchText;
    public string SearchText
    {
        get { return _searchText; }
        set { _searchText = value; SearchTextFunction(); }
    }

    public void SearchTextFunction()
    {
        var filtered = new List<CapabilityStatement.ResourceComponent>();

        var capabilities = Cache.Get<CapabilityStatement>(nameof(CapabilityStatement));

        if (capabilities != null)
        {
            if (string.IsNullOrWhiteSpace(_searchText))
            {
                filtered.AddRange(capabilities.Rest[0].Resource);
            }
            else
            {
                foreach (var cap in capabilities.Rest[0].Resource)
                {
                    if (cap.Type.ToString().Contains(_searchText, StringComparison.OrdinalIgnoreCase))
                    {
                        filtered.Add(cap);
                    }
                }
            }
        }

        Components = filtered;
    }
}
