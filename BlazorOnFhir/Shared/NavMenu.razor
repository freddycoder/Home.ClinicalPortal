@inject IMemoryCache Cache
@inject AuthUrlPagesProvider AuthUrlProvider
@inject UrlService UrlService

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorOnFhir</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@UrlService.Url("/")" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@UrlService.Url("/metadata")">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Metadata
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <div class="form-inline my-2 my-lg-0">
                        <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @bind="SearchText" @bind:event="oninput">
                    </div>
                </li>
                @foreach (var action in ActionFiltered.Take(8))
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@UrlService.Url($"/{action.Type}")">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> @action.Type
                        </NavLink>
                    </li>
                }
                @if (ActionFiltered.Count > 8)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="#">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> ...
                        </NavLink>
                    </li>
                }
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <NavLink clasa="nav-link" href="@AuthUrlProvider.LoginPage">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Log in
                    </NavLink>
                </li>
            </NotAuthorized>
        </AuthorizeView>

    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}

@code {
    private string _searchText;
    public string SearchText
    {
        get { return _searchText; }
        set { _searchText = value; DoSearchText(); }
    }

    private List<CapabilityStatement.ResourceComponent> _actionFiltered;
    public List<CapabilityStatement.ResourceComponent> ActionFiltered
    {
        get
        {
            if (_actionFiltered == null)
            {
                DoSearchText();
            }

            return _actionFiltered;
        }
        set
        {
            _actionFiltered = value;
        }
    }

    public void DoSearchText()
    {
        var filtered = new List<CapabilityStatement.ResourceComponent>();

        var capabilities = Cache.Get<CapabilityStatement>(nameof(CapabilityStatement));

        if (capabilities != null)
        {
            if (string.IsNullOrWhiteSpace(_searchText))
            {
                filtered.AddRange(capabilities.Rest[0].Resource);
            }
            else
            {
                foreach (var cap in capabilities.Rest[0].Resource)
                {
                    if (cap.Type.ToString().Contains(_searchText, StringComparison.OrdinalIgnoreCase))
                    {
                        filtered.Add(cap);
                    }
                }
            }
        }

        ActionFiltered = filtered;
    }
} 